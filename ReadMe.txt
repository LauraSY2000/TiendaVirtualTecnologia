# TechStore ‚Äì Tienda Online

TechStore es una aplicaci√≥n web de comercio electr√≥nico desarrollada con arquitectura en capas, que permite la gesti√≥n y visualizaci√≥n de productos tecnol√≥gicos.  
Incluye un sistema b√°sico de autenticaci√≥n para la administraci√≥n y soporte para carga masiva de im√°genes desde archivo CSV.  

## Caracter√≠sticas Principales
- Cat√°logo de productos con nombre, precio, categor√≠a e imagen asociada.
- Backend desarrollado en **Spring Boot** con API REST.
- Base de datos **MySQL** con relaciones entre productos, categor√≠as, im√°genes y usuarios.
- Carga masiva de im√°genes desde CSV usando **OpenCSV**.
- Frontend responsive con **HTML5**, **JavaScript** y **TailwindCSS**.
- Sistema de login b√°sico para administraci√≥n.

---

## Objetivos

### Objetivo General
Desarrollar una plataforma web que permita la gesti√≥n, almacenamiento y visualizaci√≥n de productos, integrando funcionalidades de autenticaci√≥n y carga de im√°genes.

### Objetivos Espec√≠ficos
- Implementar un backend con API REST para la gesti√≥n de datos.
- Dise√±ar un frontend responsive e interactivo.
- Integrar una base de datos MySQL con relaciones entre entidades.
- Implementar un m√≥dulo de carga masiva de im√°genes mediante CSV.
- Configurar un sistema de login para control de acceso.

---

## Arquitectura del Sistema

La aplicaci√≥n est√° basada en una **arquitectura en tres capas**:

1. **Frontend (Presentaci√≥n)**
   - Interfaz de usuario desarrollada con HTML5, JavaScript y TailwindCSS.
   - Peticiones HTTP mediante `fetch()` al backend.
   
2. **Backend (L√≥gica de Negocio)**
   - Desarrollado en **Spring Boot**.
   - Capas organizadas en controladores, servicios y repositorios.
   
3. **Base de Datos (Persistencia)**
   - **MySQL** con tablas para productos, categor√≠as, im√°genes y usuarios.
   - Relaciones 1:N entre categor√≠as-productos y productos-im√°genes.
---

## Tecnolog√≠as Utilizadas

| Tecnolog√≠a | Uso |
|------------|-----|
| Java 17 | Lenguaje principal del backend |
| Spring Boot | Framework para el backend REST |
| Spring Data JPA | Acceso a datos con repositorios |
| MySQL | Base de datos relacional |
| Maven | Gesti√≥n de dependencias |
| HTML5 | Estructura de la interfaz |
| JavaScript (ES6) | Interactividad en el frontend |
| TailwindCSS | Dise√±o y estilos responsive |
| OpenCSV | Lectura de CSV para carga de im√°genes |
| Postman | Pruebas de API |
| Git/GitHub | Control de versiones |

---

## Estructura del Proyecto
src/main/java/com/tienda
‚îÇ‚îÄ‚îÄ controller/ ‚Üí Controladores REST
‚îÇ‚îÄ‚îÄ model/ ‚Üí Entidades JPA
‚îÇ‚îÄ‚îÄ repository/ ‚Üí Repositorios de datos
‚îÇ‚îÄ‚îÄ services/ ‚Üí L√≥gica de negocio
‚îÇ‚îÄ‚îÄ config/ ‚Üí Configuraci√≥n del proyecto
src/main/resources
‚îÇ‚îÄ‚îÄ application.properties ‚Üí Configuraci√≥n de conexi√≥n
‚îÇ‚îÄ‚îÄ imagenes.csv ‚Üí Archivo CSV para im√°genes
frontend/
‚îÇ‚îÄ‚îÄ HTML, CSS y JS de la interfaz

## Flujo de Datos

1. El usuario accede al **frontend** desde el navegador.
2. El frontend realiza una petici√≥n `fetch()` al backend.
3. El backend recibe la solicitud en un **controlador**.
4. El controlador llama a un **servicio** que contiene la l√≥gica.
5. El servicio usa un **repositorio JPA** para acceder a la base de datos.
6. La base de datos devuelve la informaci√≥n solicitada.
7. El backend responde en **JSON**.
8. El frontend procesa y muestra los datos.
## Endpoints de la API

| M√©todo | Endpoint | Descripci√≥n |
|--------|----------|-------------|
| GET | `/api/productos` | Listar todos los productos |
| POST | `/api/productos` | Crear un nuevo producto |
| PUT | `/api/productos/{id}` | Actualizar un producto |
| DELETE | `/api/productos/{id}` | Eliminar un producto |
| POST | `/login` | Login de usuario |
| POST | `/api/imagenes/cargar` | Cargar im√°genes desde CSV |

---

## üóÑ Modelo de Base de Datos

**Relaciones:**
- Una **categor√≠a** tiene muchos **productos**.
- Un **producto** puede tener muchas **im√°genes**.
- Los **usuarios** gestionan el sistema.

**Diagrama ER:**
![Diagrama ER](er_diagrama.png)

---

## Diccionario de Datos

**Tabla: productos**
| Campo | Tipo | Descripci√≥n |
|-------|------|-------------|
| id | BIGINT | ID √∫nico |
| nombre | VARCHAR | Nombre del producto |
| precio | DECIMAL | Precio en COP |
| categoria_id | BIGINT | FK a categor√≠as |

**Tabla: imagenes**
| Campo | Tipo | Descripci√≥n |
|-------|------|-------------|
| id | BIGINT | ID √∫nico |
| producto_id | BIGINT | FK a productos |
| direccion | VARCHAR | URL o ruta de imagen |
| alt_text | VARCHAR | Texto alternativo |
| orden | INT | Orden de visualizaci√≥n |

**Tabla: categorias**
| Campo | Tipo | Descripci√≥n |
|-------|------|-------------|
| id | BIGINT | ID √∫nico |
| nombre | VARCHAR | Nombre de categor√≠a |

**Tabla: usuarios**
| Campo | Tipo | Descripci√≥n |
|-------|------|-------------|
| id | BIGINT | ID √∫nico |
| username | VARCHAR | Nombre de usuario |
| password | VARCHAR | Contrase√±a sin cifrar |

---

## üñ• Manual de Usuario

### Iniciar Sesi√≥n
1. Acceder a la p√°gina de login.
2. Ingresar usuario y contrase√±a.
3. Si las credenciales son correctas, se concede acceso a funciones administrativas.

### Visualizar Productos
1. Entrar a la secci√≥n "Productos".
2. Los datos se cargan autom√°ticamente desde la API.
3. Se muestran nombre, precio, categor√≠a e imagen.


000C:\Users\USER\OneDrive - Universidad de los andes\Escritorio\SENA\Formaci√≥n lectiva\Etapa 5\Proyecto_tienda
